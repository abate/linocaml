# OASIS_START
# DO NOT EDIT (digest: 7a32c548c149253f66686ded747d2892)
version = "0.1"
description = "A library with some ppx"
archive(byte) = "linocaml.cma"
archive(byte, plugin) = "linocaml.cma"
archive(native) = "linocaml.cmxa"
archive(native, plugin) = "linocaml.cmxs"
exists_if = "linocaml.cma"
package "ppx_lens" (
 version = "0.1"
 description = "A library with some ppx"
 requires = "ppx_deriving linocaml"
 archive(syntax, preprocessor) = "ppx_lens.cma"
 archive(syntax, toploop) = "ppx_lens.cma"
 archive(syntax, preprocessor, native) = "ppx_lens.cmxa"
 archive(syntax, preprocessor, native, plugin) = "ppx_lens.cmxs"
 ppxopt = "ppx_deriving,./ppx_lens.cma"
 exists_if = "ppx_lens.cma"
)

package "ppx" (
 version = "0.1"
 description = "A library with some ppx"
 requires = "linocaml ppx_deriving"
 archive(syntax, preprocessor) = "ppx.cma"
 archive(syntax, toploop) = "ppx.cma"
 archive(syntax, preprocessor, native) = "ppx.cmxa"
 archive(syntax, preprocessor, native, plugin) = "ppx.cmxs"
 ppx = "ppx_linocaml"
 exists_if = "ppx.cma"
 package "internal" (
  version = "0.1"
  description = "A library with some ppx"
  requires = "compiler-libs ppx_tools.metaquot ppx_deriving.api"
  archive(byte) = "ppx_internal.cma"
  archive(byte, plugin) = "ppx_internal.cma"
  archive(native) = "ppx_internal.cmxa"
  archive(native, plugin) = "ppx_internal.cmxs"
  exists_if = "ppx_internal.cma"
 )
)

package "lwt" (
 version = "0.1"
 description = "A library with some ppx"
 requires = "linocaml lwt lwt.unix"
 archive(byte) = "linocaml_lwt.cma"
 archive(byte, plugin) = "linocaml_lwt.cma"
 archive(native) = "linocaml_lwt.cmxa"
 archive(native, plugin) = "linocaml_lwt.cmxs"
 exists_if = "linocaml_lwt.cma"
)
# OASIS_STOP
